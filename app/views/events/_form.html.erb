<%
# USAGE: Display a form for creating or editing an event.
#
# VARIABLES:
# * event: An new or existing Event instance.
%>

<% content_for :css_insert do %>
  <%= stylesheet_link_tag 'forms' %>
<% end %>

<% content_for :javascript_insert do %>
  <%= javascript_include_tag 'forms' %>
  <%= javascript_include_tag 'recurrence' %>
  <script>
    var completed_title = '';
    $(document).ready(function(){

      // Initialize autocompletion for venues
      $("input.autocomplete").attr('autocomplete', 'off').autocomplete({
        source: "/venues/autocomplete.json",
        minLength: 2,
        search: function(event, ui) {
          //$("#event_venue_loading").show();
          $("#event_venue_id").val('');
        },
        select: function(event, ui) {
          $('input.autocomplete').val( ui.item.title );
          $("#event_venue_id").val( ui.item.id );

          return false;
        }
      }).data("ui-autocomplete" )._renderItem = function( ul, item ) {
        var short_address = (item.street_address && item.street_address.length > 0)
                              ? item.street_address+", "+item.locality+" "+item.region
                              : item.address;
        return $( "<li><a href='javascript:void(0);'><strong>"+item.title+"</strong><br />"+short_address+"</a></li>" )
                .data( "item.autocomplete", item )
                .appendTo(ul);
      };

      // Initialize date and time pickers
      $('.date_picker').datepicker({ dateFormat: 'yy-mm-dd' });
      $('.time_picker').timepicker({ 'timeFormat': 'g:i A' });

      // Update "time_end" to maintain the same offset from "time_start" if "time_start" changes, and display a highlight to alert the user.
      var oldTime = $("#time_start").timepicker('getTime');
      $("#time_start").change(function() {
        if ($("#time_end").val()) { // Only update when second input has a value.
          var duration = ($("#time_end").timepicker('getTime') - oldTime);
          var newTime = $("#time_start").timepicker('getTime');
          // Calculate and update the time in the second input.
          $("#time_end").timepicker('setTime', new Date(newTime.getTime() + duration));
          $('#time_end').effect('highlight', {}, 3000);
          oldTime = newTime;
        }
      });

      // Update "date_end" so that it is the same as "date_start" if "date_start" is changed to after "date_end", and displays a highlight to alert the user.
      $("#date_start").change(function() {
        // Only update when end value is defined.
        if ($("#date_end").val()) {
          // Only update when end value is before start value.
          var startDate = $.datepicker.parseDate('yy-mm-dd', $('#date_start').val());
          var endDate = $.datepicker.parseDate('yy-mm-dd', $('#date_end').val());
          if (endDate < startDate) {
            $('#date_end').val($('#date_start').val());
            $('#date_end').effect('highlight', {}, 3000);
          }
        }
      });
    });
  </script>
<% end %>

<% if params[:preview] && event.valid? -%>
<div id="event_preview">
    <h2>Preview your event</h2>

    <%= render :partial => "item", :locals => { :event => event, :has_contentbar => false } %>
</div>
<% end -%>

<%= semantic_form_for(event, :html => {:id => 'event_form', :class => 'standard_form', :novalidate => 'novalidate'}) do |f| %>
  <%= f.inputs :name => "#{'Editing: ' unless event.new_record?} <em>#{event.title}</em>".html_safe do %>
    <% if event.has_recurrences? %>
      <li class='radio input' id='event_update_all'>
        <%= label_tag :recurrence, "Recurrence", class: 'label' %>
        <%= radio_button_tag :update_all, false, checked: true %>
        <%= label_tag :update_all_false, "Update only this event" %>
        <br/>
        <%= radio_button_tag :update_all, true %>
        <%= label_tag :update_all_true, "Update this event and all future occurrences" %>
      </li>
    <% else %>
      <%= hidden_field_tag :update_all, true %>
    <% end %>
    <% if current_admin %>
      <%= f.input :organization, as: :select, collection: Organization.all %>
    <% else %>
      <%= f.input :organization, input_html: { disabled: true } %>
    <% end %>
    <%= f.input :title, :label => "Event Name" %>
    <% focus_on '#event_title' %>
    <li class="string input required stringish" id="event_venue_title_input">
      <%= label_tag :venue_name, "Venue", :class => 'label' %>
      <%= text_field_tag 'venue_name', '', :class=> 'autocomplete', :value => !event.venue.nil? ? event.venue.title : params[:venue_name] %>
      <%= hidden_field(:event, :venue_id, :value => (!event.venue.nil? ? event.venue.id : params[:event_venue_id])) %>
      <%= image_tag "spinner.gif", :id=> "event_venue_loading", :style => "display: none; margin-left: 0.5em;" %>
      <p class='inline-hints'>
        What is the name of the venue for this event? If we don't recognize the venue, we'll ask you for the address on the next page.
      </p>
    <li>
    <li id="event_times" class='input'>
      <%= f.label :when, "When", :class => 'label' %>
      <%
        present = Time.now
        # Provide initial default values for the start_time and end_time rounded to the upcoming hour.
        event.start_time ||= present + (60.minutes - present.min.minutes) - present.sec
        event.end_time   ||= present + (60.minutes - present.min.minutes) - present.sec + 1.hour
      %>
        <%= text_field_tag 'start_date', event.start_time.to_date, :id => 'date_start', :class => 'date_picker' %>
        <%= text_field_tag 'start_time', event.start_time.strftime('%I:%M %p'), :id => 'time_start', :class => 'time_picker' %>
        <span class="to">to</span>
        <%= text_field_tag 'end_time', event.end_time.strftime('%I:%M %p'), :id => 'time_end', :class => 'time_picker' %>
        <%= text_field_tag 'end_date', event.end_time.to_date, :id => 'date_end', :class => 'date_picker' %>
        <%= f.semantic_errors :start_date, :start_time, :end_date, :end_time %>
    </li>
    <li id='event_rrule_input' class='input optional'>
      <%= label_tag :rrule, "Schedule", class: 'label' %>
      <%= f.select_recurring :rrule, nil, allow_blank: true  %>
    </li>
    <%= f.input :url, as: :url, label: 'Website' %>
    <div class="minimum_age">
      <%= f.input :minimum_age,
                as: :select,
                include_blank: false,
                prompt: "Please select",
                collection: ['All ages',
                             'All ages with parent',
                             '21',
                             '18',
                             '17 with praent',
                             '17',
                             '16 with parent',
                             '16',
                             '15 with parent',
                             '15',
                             '14 with parent',
                             '14',
                             '13 with parent',
                             '13',
                             '12 with parent',
                             '12',
                             'Other - see sescription'] %>
    </div>
    <%= f.input :signup_instructions,
                as: :text,
                hint: "If volunteers need to signup, describe how (email, phone, web, etc.).",
                input_html: { rows: 2 } %>
    <%= f.input :contact_information,
                as: :text,
                hint: "How and with whom can volunteers get in touch?",
                input_html: { rows: 2 } %>
    <%= f.input :description,
                :input_html => {:rows => 12},
                :hint => "Describe the event. Things like what volunteers will do, what to bring, and who benefits from the work are good things to put here. You may format text using #{link_to("Markdown", "http://www.simpleeditions.com/59001/markdown-an-introduction", :target => "_blank")} and HTML".html_safe %>
    <%= f.input :tag_list, :required => false,
                :label => 'Tags',
                :hint => "Tags are comma-separated keywords that make it easier to find your event and boost its position in searches. You can also use a tag like <code>plancast:plan=ABCD</code> to associate this with a particular <a href='http://plancast.com/'>Plancast</a> event.".html_safe %>
    <li class='trap'>
      <%= label 'trap', 'field', "Leave this field blank or we'll think you're a robot." %>
      <%= text_field_tag 'trap_field', params[:trap_field] %>
    </li>
  <% end %>
  <%= f.actions do %>
    <%= f.action :submit, :label => "Preview", :button_html => {:name => 'preview'} %>
    <%= f.action :submit %>
  <% end %>
<% end %>
